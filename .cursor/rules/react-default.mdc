---
description:
globs:
alwaysApply: true
---

# 프로젝트 폴더 구조 규칙

## 기본 폴더 구조

```plaintext
src/
├─ assets/             # 이미지, 폰트, 전역 스타일 등
├─ components/         # 공통 UI 컴포넌트 (Button, Modal 등)
├─ constants/          # 전역 상수 (API_URL, ENUM 등)
├─ hooks/              # 전역 커스텀 훅 (useDebounce 등)
├─ stores/             # 전역 상태 관리 (Zustand)
├─ types/              # 전역 타입 (공통 인터페이스, 유틸 타입)
├─ utils/              # 전역 유틸 함수
├─ layouts/            # 공통 레이아웃 (헤더/사이드바 포함 페이지 래퍼)
├─ domains/
│   ├─ Domain1/
│   │   ├─ pages/       # 이 도메인과 관련된 페이지 컴포넌트
│   │   ├─ components/  # 도메인 전용 UI 컴포넌트
│   │   ├─ api/         # API 호출 함수 (Axios 요청 등)
│   │   ├─ hooks/       # 도메인 전용 커스텀 훅
│   │   ├─ utils/       # 도메인 전용 유틸
│   │   ├─ types/       # 도메인 전용 타입
│   │   ├─ locales/     # 도메인 전용 번역 리소스
│   │   └─ constants/   # 도메인 전용 상수 (선택)
│
│   └─ Domain2/
│       ├─ pages/
│       ├─ components/
│       ├─ api/
│       ├─ hooks/
│       ├─ utils/
│       ├─ types/
│       ├─ locales/
│       └─ constants/
├─ App.tsx
└─ main.tsx
```

---

## 규칙 요약

- 도메인 단위 폴더(`domains/`)에는 해당 기능에 필요한 모든 요소(pages, components, api 등)를 포함합니다.
- 공통적으로 사용하는 UI 컴포넌트는 `components/`, 상태는 `stores/`, 유틸은 `utils/`, 타입은 `types/`에 위치합니다.
- 기능 단위 이동/리팩토링을 쉽게 하기 위해 **도메인 응집도를 높이는 구조**를 유지합니다.

## 컴포넌트 작성 규칙 (공통)

- 모든 컴포넌트는 `const Component = () => {}` 형태의 **arrow function**으로 작성합니다.
- 파일명은 **PascalCase**를 따릅니다. (예: `HomePage.tsx`, `UserCard.tsx`)
- 가능하면 **시멘틱 태그**(`main`, `section`, `header` 등)를 사용해 마크업 의미를 명확히 합니다.

## Storybook 작성 규칙

- 스토리 파일은 컴포넌트와 **같은 폴더**에 위치시키며, 파일명은 `.stories.tsx` 형식을 따릅니다.

  ```
  components/
    └─ Button/
        ├─ Button.tsx
        └─ Button.stories.tsx
  ```

- `@storybook/react-vite`를 기반으로 다음 형식을 사용합니다:

  ```tsx
  import type { Meta, StoryObj } from '@storybook/react-vite';
  import { fn } from 'storybook/test';
  import { Button } from './Button';

  const meta = {
    title: 'Example/Button',
    component: Button,
    parameters: {
      layout: 'centered',
    },
    tags: ['autodocs'],
    argTypes: {
      backgroundColor: { control: 'color' },
    },
    args: {
      onClick: fn(),
    },
  } satisfies Meta<typeof Button>;

  export default meta;
  type Story = StoryObj<typeof meta>;

  export const Primary: Story = {
    args: {
      primary: true,
      label: 'Button',
    },
  };
  ```

- 기본 구조는 아래 순서를 따릅니다:
  1. `import` 및 타입 선언 (`Meta`, `StoryObj`)
  2. `meta` 객체 정의 (`title`, `component`, `parameters`, `argTypes`, `args`)
  3. `export default meta`
  4. `Story` 타입 정의 후, 각 story export (`Primary`, `Secondary`, 등)

- **args 기반 작성 방식**을 기본으로 하며, 각 스토리는 컴포넌트의 대표적인 UI 상태(예: Primary, Secondary, Small 등)를 명확히 표현합니다.

- `args.onClick = fn()`을 활용하여 **액션 로그를 확인할 수 있도록 설정**합니다.

- 가능한 경우 `tags: ['autodocs']`를 추가해 **자동 문서화 기능**을 활용합니다.

---

이 가이드는 프로젝트 초기 셋업뿐만 아니라 팀 확장, 유지보수, 리팩토링 시에도 일관된 품질을 유지하기 위한 목적입니다.